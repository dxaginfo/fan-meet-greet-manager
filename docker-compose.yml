version: '3.8'

services:
  # Backend API server
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: fan-meet-greet-server
    volumes:
      - ./:/app
      - /app/node_modules
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fanmeetgreet
      - REDIS_URL=redis://redis:6379
      - PORT=5000
      - CLIENT_URL=http://localhost:3000
      - JWT_SECRET=dev_jwt_secret
      - REFRESH_TOKEN_SECRET=dev_refresh_token_secret
      - RESET_TOKEN_SECRET=dev_reset_token_secret
    networks:
      - app-network
    command: npm run dev:server
    restart: unless-stopped

  # Frontend React client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.client
    container_name: fan-meet-greet-client
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
    depends_on:
      - server
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: fan-meet-greet-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fanmeetgreet
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # Redis for caching and real-time features
  redis:
    image: redis:alpine
    container_name: fan-meet-greet-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Prisma Studio for database management
  prisma-studio:
    image: node:16-alpine
    container_name: fan-meet-greet-prisma-studio
    working_dir: /app
    volumes:
      - ./:/app
    ports:
      - "5555:5555"
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fanmeetgreet
    networks:
      - app-network
    command: npx prisma studio --port 5555 --host 0.0.0.0

  # MinIO for S3-compatible storage (for local development)
  minio:
    image: minio/minio
    container_name: fan-meet-greet-minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    networks:
      - app-network
    command: server /data --console-address ":9001"
    restart: unless-stopped

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog
    container_name: fan-meet-greet-mailhog
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - app-network
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer
    container_name: fan-meet-greet-adminer
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data: