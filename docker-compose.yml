version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile.server
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app/server
      - ./node_modules:/app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fanmeetgreet
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret
      - REFRESH_TOKEN_SECRET=dev_refresh_secret
      - RESET_TOKEN_SECRET=dev_reset_secret
      - CLIENT_URL=http://localhost:3000
    networks:
      - app-network
    restart: unless-stopped

  # Frontend client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.client
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
    depends_on:
      - api
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=fanmeetgreet
    networks:
      - app-network
    restart: unless-stopped

  # Redis for caching and real-time data
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Elasticsearch for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network
    restart: unless-stopped

  # Adminer for database management
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data: